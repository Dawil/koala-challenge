{"version":3,"sources":["Card.js","components/Slider.js","CityInput.js","Weather.js","Locator.js","App.js","reportWebVitals.js","index.js"],"names":["Header","styled","h1","props","theme","colors","text","SubHeading","p","Summary","Img","img","Temp","City","getDay","date","Date","capitalize","str","split","map","d","toUpperCase","slice","join","formatDate","dateText","month","getDate","getMonth","getFullYear","getHours","String","getMinutes","padStart","Card","iconID","forecast","city","sortedList","Array","from","sort","first","second","main","temp","length","getMinMax","max","dt_txt","weather","description","src","icon","alt","Math","round","OuterContainer","div","Container","css","background","Current","Prev","Next","Slider","children","useState","activeCardIndex","setActiveCardIndex","containerEl","setContainerEl","setContainer","useCallback","node","window","innerWidth","totalWidth","setTotalWidth","childCount","width","offsetWidth","scrollWidth","useEffect","addEventListener","ref","style","transform","child","i","state","onClick","Slide","useTheme","classes","Button","input","button","CityInput","userCity","onChange","setCity","useRef","type","name","value","e","target","title","API_KEY","Weather","location","useQuery","fetch","makeCityURL","then","res","json","coords","latitude","longitude","makeLocationURL","isLoading","error","data","alert","days","Map","list","concat","groupByDate","Object","entries","entry","Locator","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","queryCache","QueryCache","ToggleTheme","themes","light","dark","App","setTheme","selectedTheme","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6485b759.chunk.js","sourcesContent":["import styled from '@emotion/styled'\n\nconst Header = styled.h1`\n  margin: 0;\n  align: left;\n  font-weight: normal;\n  text-align: left;\n  color: ${props => props.theme.colors.text};\n`\n\nconst SubHeading = styled.p`\n  margin: 0;\n  font-size: 10pt;\n  align: left;\n  text-align: left;\n  color: ${props => props.theme.colors.text};\n`\n\nconst Summary = styled.p`\n  align: left;\n  font-size: 16pt;\n  text-align: left;\n  color: ${props => props.theme.colors.text};\n`\n\nconst Img = styled.img`\n  float: left;\n  width: 60px;\n  height: 60px;\n  margin-top: 14px;\n`\n\nconst Temp = styled.p`\n  font-size: 28pt;\n  font-weight: bold;\n  text-align: left;\n  color: ${props => props.theme.colors.text};\n`\n\nconst City = styled.p`\n  font-size: 16pt;\n  position: absolute;\n  opacity: 0;\n  bottom: 0;\n  transition: all 1s ease;\n  text-align: left;\n  color: ${props => props.theme.colors.text};\n`\n\nconst getDay = date =>\n  [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"][\n    new Date(date).getDay()\n  ]\n\nconst getMinMax = forecast => {\n  const sortedList = Array.from(forecast)\n  sortedList.sort((first, second) =>\n    first.main.temp - second.main.temp\n  )\n  return [sortedList[0], sortedList[sortedList.length - 1]]\n}\n\nconst capitalize = str =>\n  str.split(' ').map(d =>\n    d[0].toUpperCase() + d.slice(1)\n  ).join(' ')\n\nconst textifyMonth = month =>\n  [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\"\n  ][month]\n\nconst formatDate = dateText => {\n  const date = new Date(dateText)\n  return [\n    date.getDate(),\n    textifyMonth(date.getMonth()),\n    date.getFullYear(),\n    date.getHours() % 12 + ':' +  String(date.getMinutes()).padStart(2, '0'),\n    date.getHours() / 12 >= 1 ? 'pm' : 'am'\n  ].join(' ')\n}\n\nconst getIconURL = iconID =>\n  `http://openweathermap.org/img/wn/${iconID}@2x.png`\n\nconst Card = ({date, forecast, city}) => {\n  const [min, max] = getMinMax(forecast)\n\n  return (\n    <div>\n      <Header>{getDay(date)}</Header>\n      <SubHeading>{formatDate(max.dt_txt)}</SubHeading>\n      <Summary>{capitalize(max.weather[0].description)}</Summary>\n      <Img\n        src={getIconURL(max.weather[0].icon)}\n        alt={capitalize(max.weather[0].description)}\n      />\n      <Temp>{Math.round(max.main.temp - 273)}&deg;C</Temp>\n      <City>{city}</City>\n    </div>\n  )\n}\n\nexport default Card\n","/** @jsxImportSource @emotion/react */\n\nimport { useState, useCallback, useEffect } from 'react'\nimport styled from '@emotion/styled'\nimport { css, useTheme } from '@emotion/react'\n\nconst OuterContainer = styled.div`\n  overflow: hidden;\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 3em 0;\n  height: 450px;\n  max-width: 200%;\n  min-width: 600px;\n  width: auto;\n  transition: transform 1s ease;\n`\n\nconst Card = theme => css`\n  background-color: ${theme.colors.background};\n  border-radius: 10px;\n  max-height: 250px;\n  height: 100%;\n  opacity: 0;\n  width: 200px;\n  min-width: 170px;\n  max-width:200px;\n  margin: 2em 1em;\n  padding: 1rem ;\n  transition: all 1s ease;\n  box-shadow: -5px 5px 3px 2px rgba(200,200,200,0.5);\n  position: relative;\n`\n\nconst Current = css`\n  opacity: 1;\n  height: 80%;\n  max-height: 80%;\n  margin: 1em 1em;\n  * {\n    opacity: 1 !important;\n  }\n`\n\nconst Prev = css`\n  opacity: 1;\n`\n\nconst Next = css`\n  opacity: 1;\n`\n\nexport const Slider = ({children}) => {\n  const [activeCardIndex, setActiveCardIndex] = useState(1)\n  const [containerEl, setContainerEl] = useState(null);\n  const setContainer = useCallback(node =>\n    node !== null ? setContainerEl(node) : null\n  , [])\n  const [totalWidth, setTotalWidth] = useState(window.innerWidth)\n\n  const childCount = containerEl ? containerEl.children.length : 6\n  let width = containerEl ? containerEl.children[0].offsetWidth : 205 // guess\n  let scrollWidth = containerEl ? containerEl.scrollWidth : width*childCount\n\n  useEffect(() =>\n    window.addEventListener(\"resize\", () =>\n      setTotalWidth(window.innerWidth)\n    ), []\n  )\n\n  return (\n    <OuterContainer>\n      <Container ref={setContainer} style={{ transform: `translateX(${totalWidth/2 - width/2 + activeCardIndex * -scrollWidth/6}px)` }}>\n        {children.map((child, i) => {\n          return (\n            <Slide\n              key={i}\n              state={i - activeCardIndex}\n              onClick={() => setActiveCardIndex(i)}\n            >\n              {child}\n            </Slide>\n          )\n        })}\n      </Container>\n    </OuterContainer>\n  )\n}\n\nexport const Slide = ({state, onClick, children}) => {\n  const theme = useTheme()\n  const classes = {\n    \"-1\": [Card(theme), Prev],\n    \"0\": [Card(theme), Current],\n    \"1\": [Card(theme), Next],\n  }[state] || [Card(theme)]\n  return (\n    <div css={[...classes]} onClick={onClick}>\n      {children}\n    </div>\n  )\n}\n","import { useState, useRef } from 'react'\nimport styled from '@emotion/styled'\n\nconst Container = styled.div`\n  position: absolute;\n  top: 1em;\n  left: 0;\n  right: 0;\n`\n\nconst Button = styled.input`\n  color: ${props => props.theme.colors.text};\n  background-color: ${props => props.theme.colors.button};\n`\n\nconst CityInput = ({userCity, onChange}) => {\n  const [city, setCity] = useState(userCity)\n  const input = useRef(null)\n\n  return <Container>\n    <input\n      ref={input}\n      type=\"text\"\n      name=\"city\"\n      value={city}\n      onChange={e => setCity(e.target.value)}\n      title=\"Input your city\"\n    />\n    <Button type=\"button\" value=\"Select City\" onClick={() => {\n      onChange(city)\n    }}/>\n  </Container>\n}\n\nexport default CityInput\n","import { useQuery } from 'react-query'\nimport { useState } from 'react'\nimport Card from './Card.js'\nimport { Slider } from './components/Slider.js'\nimport CityInput from './CityInput.js'\n\nconst API_KEY = \"ede9c8f8660863bcfcc189d771d12cfc\"\n\nconst makeCityURL = city =>\n  `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${API_KEY}`\n\nconst makeLocationURL = location =>\n  `https://api.openweathermap.org/data/2.5/forecast?lat=${location.coords.latitude}&lon=${location.coords.longitude}&appid=${API_KEY}`\n\nconst groupByDate = data => {\n  const days = new Map()\n  for (const d of data.list) {\n      const date = d.dt_txt.split(' ')[0]\n      days[date] = (days[date] || []).concat([d])\n  }\n  return days\n}\n\nconst Weather = ({userCity, location}) => {\n  const [city, setCity] = useState(userCity)\n  const { isLoading, error, data } = useQuery(['weatherData', city], () =>\n//    new Promise(resolve =>\n//      resolve(JSON.parse(localStorage.getItem('query'))[0].data)\n//    )\n    city\n    ? fetch(makeCityURL(city)).then(res =>\n        res.json()\n      )\n    : fetch(makeLocationURL(location)).then(res =>\n        res.json()\n      )\n  )\n\n  if (error) {\n    alert(\"There was an error loading weather data\")\n    return null\n  }\n\n  const days = !isLoading && groupByDate(data)\n\n  return (\n    <>\n      <CityInput\n        onChange={setCity}\n      />\n      { !isLoading && (\n        <Slider\n          days={days}\n          city={data.city.name}\n        >\n          {Object.entries(days).map((entry, i) => {\n            const [date, forecast] = entry\n            return (\n              <Card\n                key={i}\n                date={date}\n                forecast={forecast}\n                city={data.city.name}\n              />\n            )\n          })}\n        </Slider>\n      )}\n    </>\n  )\n}\n\nexport default Weather\n","import { useQuery } from 'react-query'\nimport Weather from './Weather.js'\n\nconst Locator = props => {\n  const { isLoading, data, error } = useQuery('locationData', () =>\n    new Promise((resolve, reject) =>\n      navigator.geolocation.getCurrentPosition(resolve, reject)\n    )\n  )\n\n  if (isLoading) {\n    return <p>Loading...</p>\n  }\n\n  if (error) {\n    return <Weather userCity=\"Sydney\"/>\n  }\n\n  return <Weather location={data}/>\n\n}\n\nexport default Locator\n","import './App.css';\nimport Locator from './Locator.js'\nimport { QueryCache, ReactQueryCacheProvider } from 'react-query'\nimport styled from '@emotion/styled'\nimport { ThemeProvider } from '@emotion/react'\nimport { useState } from 'react'\n\nconst queryCache = new QueryCache()\n\nconst Container = styled.div`\n  text-align: center;\n`\nconst ToggleTheme = styled.button`\n  color: ${props => props.theme.colors.text};\n  background-color: ${props => props.theme.colors.button};\n  position: absolute;\n  top: 1em;\n  right: 1em;\n  z-index: 1;\n  margin: 5px;\n`\n\nconst themes = {\n  light: {\n    colors: {\n      button: 'white',\n      background: '#e7dfd0',\n      text: 'black'\n    }\n  },\n  dark: {\n    colors: {\n      button: 'black',\n      background: '#1b1b24',\n      text: 'white'\n    }\n  }\n}\n\n\nfunction App() {\n  const [theme, setTheme] = useState('light')\n  const selectedTheme = themes[theme]\n\n  return (\n    <Container>\n      <ThemeProvider theme={selectedTheme}>\n        <ToggleTheme\n          onClick={() => {\n            if (theme === 'light') {\n              setTheme('dark')\n            } else {\n              setTheme('light')\n            }\n          }}\n        >{ theme === 'light' ? 'Dark Mode' : 'Light Mode' }</ToggleTheme>\n        <ReactQueryCacheProvider queryCache={queryCache}>\n          <Locator/>\n        </ReactQueryCacheProvider>\n      </ThemeProvider>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}